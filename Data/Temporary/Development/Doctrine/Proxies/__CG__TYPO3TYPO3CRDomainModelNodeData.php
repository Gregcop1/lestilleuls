<?php

namespace TYPO3\Flow\Persistence\Doctrine\Proxies\__CG__\TYPO3\TYPO3CR\Domain\Model;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class NodeData extends \TYPO3\TYPO3CR\Domain\Model\NodeData implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __wakeup()
    {
        $this->__load();
        return parent::__wakeup();
    }

    public function Flow_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies()
    {
        $this->__load();
        return parent::Flow_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies();
    }

    public function Flow_Aop_Proxy_fixInjectedPropertiesForDoctrineProxies()
    {
        $this->__load();
        return parent::Flow_Aop_Proxy_fixInjectedPropertiesForDoctrineProxies();
    }

    public function Flow_Aop_Proxy_invokeJoinPoint(\TYPO3\Flow\Aop\JoinPointInterface $joinPoint)
    {
        $this->__load();
        return parent::Flow_Aop_Proxy_invokeJoinPoint($joinPoint);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setPath($path, $recursive = true)
    {
        $this->__load();
        return parent::setPath($path, $recursive);
    }

    public function getPath()
    {
        $this->__load();
        return parent::getPath();
    }

    public function getContextPath()
    {
        $this->__load();
        return parent::getContextPath();
    }

    public function getDepth()
    {
        $this->__load();
        return parent::getDepth();
    }

    public function setWorkspace(\TYPO3\TYPO3CR\Domain\Model\Workspace $workspace = NULL)
    {
        $this->__load();
        return parent::setWorkspace($workspace);
    }

    public function getWorkspace()
    {
        $this->__load();
        return parent::getWorkspace();
    }

    public function getIdentifier()
    {
        $this->__load();
        return parent::getIdentifier();
    }

    public function setIndex($index)
    {
        $this->__load();
        return parent::setIndex($index);
    }

    public function getIndex()
    {
        $this->__load();
        return parent::getIndex();
    }

    public function getParent()
    {
        $this->__load();
        return parent::getParent();
    }

    public function getParentPath()
    {
        $this->__load();
        return parent::getParentPath();
    }

    public function createNodeData($name, \TYPO3\TYPO3CR\Domain\Model\NodeType $nodeType = NULL, $identifier = NULL, \TYPO3\TYPO3CR\Domain\Model\Workspace $workspace = NULL, array $dimensions = NULL)
    {
        $this->__load();
        return parent::createNodeData($name, $nodeType, $identifier, $workspace, $dimensions);
    }

    public function createSingleNodeData($name, \TYPO3\TYPO3CR\Domain\Model\NodeType $nodeType = NULL, $identifier = NULL, \TYPO3\TYPO3CR\Domain\Model\Workspace $workspace = NULL, array $dimensions = NULL)
    {
        $this->__load();
        return parent::createSingleNodeData($name, $nodeType, $identifier, $workspace, $dimensions);
    }

    public function createNodeDataFromTemplate(\TYPO3\TYPO3CR\Domain\Model\NodeTemplate $nodeTemplate, $nodeName = NULL, \TYPO3\TYPO3CR\Domain\Model\Workspace $workspace = NULL, array $dimensions = NULL)
    {
        $this->__load();
        return parent::createNodeDataFromTemplate($nodeTemplate, $nodeName, $workspace, $dimensions);
    }

    public function getNode($path)
    {
        $this->__load();
        return parent::getNode($path);
    }

    public function setIdentifier($identifier)
    {
        $this->__load();
        return parent::setIdentifier($identifier);
    }

    public function getNumberOfChildNodes($nodeTypeFilter = NULL, \TYPO3\TYPO3CR\Domain\Model\Workspace $workspace, array $dimensions)
    {
        $this->__load();
        return parent::getNumberOfChildNodes($nodeTypeFilter, $workspace, $dimensions);
    }

    public function remove()
    {
        $this->__load();
        return parent::remove();
    }

    public function setRemoved($removed)
    {
        $this->__load();
        return parent::setRemoved($removed);
    }

    public function isRemoved()
    {
        $this->__load();
        return parent::isRemoved();
    }

    public function isVisible()
    {
        $this->__load();
        return parent::isVisible();
    }

    public function isAccessible()
    {
        $this->__load();
        return parent::isAccessible();
    }

    public function hasAccessRestrictions()
    {
        $this->__load();
        return parent::hasAccessRestrictions();
    }

    public function getDimensions()
    {
        $this->__load();
        return parent::getDimensions();
    }

    public function setDimensions(array $dimensions)
    {
        $this->__load();
        return parent::setDimensions($dimensions);
    }

    public function getMovedTo()
    {
        $this->__load();
        return parent::getMovedTo();
    }

    public function setMovedTo(\TYPO3\TYPO3CR\Domain\Model\NodeData $nodeData = NULL)
    {
        $this->__load();
        return parent::setMovedTo($nodeData);
    }

    public function similarize(\TYPO3\TYPO3CR\Domain\Model\AbstractNodeData $sourceNode)
    {
        $this->__load();
        return parent::similarize($sourceNode);
    }

    public function normalizePath($path)
    {
        $this->__load();
        return parent::normalizePath($path);
    }

    public function getDimensionValues()
    {
        $this->__load();
        return parent::getDimensionValues();
    }

    public function getDimensionsHash()
    {
        $this->__load();
        return parent::getDimensionsHash();
    }

    public function matchesWorkspaceAndDimensions($workspace, array $dimensions = NULL)
    {
        $this->__load();
        return parent::matchesWorkspaceAndDimensions($workspace, $dimensions);
    }

    public function isInternal()
    {
        $this->__load();
        return parent::isInternal();
    }

    public function move($path, $workspace)
    {
        $this->__load();
        return parent::move($path, $workspace);
    }

    public function createShadow($path)
    {
        $this->__load();
        return parent::createShadow($path);
    }

    public function setAsShadowOf(\TYPO3\TYPO3CR\Domain\Model\NodeData $nodeData = NULL)
    {
        $this->__load();
        return parent::setAsShadowOf($nodeData);
    }

    public function setProperty($propertyName, $value)
    {
        $this->__load();
        return parent::setProperty($propertyName, $value);
    }

    public function hasProperty($propertyName)
    {
        $this->__load();
        return parent::hasProperty($propertyName);
    }

    public function getProperty($propertyName, $returnNodesAsIdentifiers = false, \TYPO3\TYPO3CR\Domain\Service\Context $context = NULL)
    {
        $this->__load();
        return parent::getProperty($propertyName, $returnNodesAsIdentifiers, $context);
    }

    public function removeProperty($propertyName)
    {
        $this->__load();
        return parent::removeProperty($propertyName);
    }

    public function getProperties($returnNodesAsIdentifiers = false, \TYPO3\TYPO3CR\Domain\Service\Context $context = NULL)
    {
        $this->__load();
        return parent::getProperties($returnNodesAsIdentifiers, $context);
    }

    public function getPropertyNames()
    {
        $this->__load();
        return parent::getPropertyNames();
    }

    public function setContentObject($contentObject)
    {
        $this->__load();
        return parent::setContentObject($contentObject);
    }

    public function getContentObject()
    {
        $this->__load();
        return parent::getContentObject();
    }

    public function unsetContentObject()
    {
        $this->__load();
        return parent::unsetContentObject();
    }

    public function setNodeType(\TYPO3\TYPO3CR\Domain\Model\NodeType $nodeType)
    {
        $this->__load();
        return parent::setNodeType($nodeType);
    }

    public function getNodeType()
    {
        $this->__load();
        return parent::getNodeType();
    }

    public function setHidden($hidden)
    {
        $this->__load();
        return parent::setHidden($hidden);
    }

    public function isHidden()
    {
        $this->__load();
        return parent::isHidden();
    }

    public function setHiddenBeforeDateTime(\DateTime $dateTime = NULL)
    {
        $this->__load();
        return parent::setHiddenBeforeDateTime($dateTime);
    }

    public function getHiddenBeforeDateTime()
    {
        $this->__load();
        return parent::getHiddenBeforeDateTime();
    }

    public function setHiddenAfterDateTime(\DateTime $dateTime = NULL)
    {
        $this->__load();
        return parent::setHiddenAfterDateTime($dateTime);
    }

    public function getHiddenAfterDateTime()
    {
        $this->__load();
        return parent::getHiddenAfterDateTime();
    }

    public function setHiddenInIndex($hidden)
    {
        $this->__load();
        return parent::setHiddenInIndex($hidden);
    }

    public function isHiddenInIndex()
    {
        $this->__load();
        return parent::isHiddenInIndex();
    }

    public function setAccessRoles(array $accessRoles)
    {
        $this->__load();
        return parent::setAccessRoles($accessRoles);
    }

    public function getAccessRoles()
    {
        $this->__load();
        return parent::getAccessRoles();
    }


    public function __sleep()
    {
        return array_merge(array('__isInitialized__'), parent::__sleep());
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        parent::__clone();
    }
}